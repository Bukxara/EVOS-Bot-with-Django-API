from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from api import *

start = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üç¥ –ú–µ–Ω—é")
        ],
        [
            KeyboardButton(text="üõç –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
            KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
        ]
    ], resize_keyboard=True
)

phone_number = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìû –ú–æ–π –Ω–æ–º–µ—Ä", request_contact=True)
        ],
        [
            KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        ],
    ], resize_keyboard=True
)

location = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                           request_location=True)
        ],
        [
            KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        ]
    ], resize_keyboard=True
)

nazad = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        ]
    ], resize_keyboard=True
)

# menu = ReplyKeyboardMarkup(
#     keyboard=[
#         [
#             KeyboardButton(text="üó∫ –ú–æ–∏ –∞–¥—Ä–µ—Å–∞")
#         ],
#         [
#             KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"),
#             KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
#         ]
#     ], resize_keyboard=True
# )


async def categories(tg_id):
    button = ReplyKeyboardMarkup(row_width=2)
    categories = await all_categories()
    basket = await get_basket(tg_id)

    if basket:
        button.add(
            KeyboardButton(text="üì• –ö–æ—Ä–∑–∏–Ω–∞"))
        button.add(
            KeyboardButton(text=categories[0]["category_name"]))
        for category in categories[1:]:
            button.insert(
                KeyboardButton(text=category["category_name"])
            )
    else:
        for category in categories:
            button.insert(
                KeyboardButton(text=category["category_name"])
            )
        button.add(
            KeyboardButton(text="üì• –ö–æ—Ä–∑–∏–Ω–∞"))

    button.insert(
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )

    return button


async def products(category_name, tg_id):
    button = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    products = await products_by_category_name(category_name)
    basket = await get_basket(tg_id)
    if basket:
        button.add(
            KeyboardButton(text="üì• –ö–æ—Ä–∑–∏–Ω–∞"))
        button.add(
            KeyboardButton(text=products[0]["product_name"]))
        for product in products[1:]:
            button.insert(
                KeyboardButton(
                    text=product["product_name"]))
    else:
        for product in products:
            button.insert(
                KeyboardButton(
                    text=product["product_name"]))
    button.add(
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

    return button

product = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üì• –ö–æ—Ä–∑–∏–Ω–∞")
        ],
        [
            KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        ]
    ], resize_keyboard=True
)

payment_method = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–µ")
        ],
        [
            KeyboardButton(text="Click")
        ],
        [
            KeyboardButton(text="Payme")
        ],
        [
            KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        ],
    ], resize_keyboard=True
)

confirm = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        ],
        [
            KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        ]
    ], resize_keyboard=True
)

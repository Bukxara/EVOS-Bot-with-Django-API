from aiogram import types
from loader import dp
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress
from data.config import URL, ADMINS
from states.states import *
from keyboards.default.reply_buttons import *
from keyboards.inline.inline_buttons import *
from api import *

user_data = {}


def count_and_id(data, second=None):
    if not second:
        idx = data.index("_")
        return data[idx+1:]
    idx1 = data.index("_")
    idx2 = data.index("/")
    return [data[idx1+1:idx2], data[idx2+1:]]


@dp.message_handler(text="üì• –ö–æ—Ä–∑–∏–Ω–∞", state="*")
async def basket(message: types.Message, state: FSMContext):
    markup = await categories(message.from_user.id)
    result = await basket_button(message.from_user.id)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)
    if result['is_empty']:
        await message.answer(text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–æ!")
    else:
        await message.answer(text=f"*–í –∫–æ—Ä–∑–∏–Ω–µ:*\n{result['basket_text']}\n{result['price_text']}",
                             reply_markup=result["button"], parse_mode="Markdown")
    await state.set_state(Stages.category)


@dp.message_handler(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", state="*")
async def menu(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state in ["Stages:category", "Comment:comment"]:
        await state.set_state(None)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö", reply_markup=start)
        await empty_basket(message.from_user.id)
    elif current_state == "Stages:product":
        markup = await categories(message.from_user.id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)
        await state.set_state(Stages.category)
    elif current_state == "Stages:count":
        data = await state.get_data()
        markup = await products(data["category"], message.from_user.id)
        data = await get_category_by_name(data["category"])
        await message.answer_photo(photo=f"{URL}{data[0]['category_image']}", reply_markup=markup)
        await state.set_state(Stages.product)
        user_data[message.from_user.id] = 1
    elif current_state == "Order:phone":
        markup = await categories(message.from_user.id)
        result = await basket_button(message.from_user.id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö", reply_markup=start)
        await message.answer(text=f"*–í –∫–æ—Ä–∑–∏–Ω–µ:*\n{result['basket_text']}\n{result['price_text']}",
                             reply_markup=result["button"], parse_mode="Markdown")
    elif current_state == "Order:location":
        await message.answer("""–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 ** *** ** ** 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –æ–Ω–ª–∞–π–Ω —Å 
–ø–æ–º–æ—â—å—é Click, –ª–∏–±–æ Payme, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä 
—Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –≤ 
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–µ—Ä–≤–∏—Å–µ""", reply_markup=phone_number)
        await state.set_state(Order.phone)
    elif current_state == "Order:payment_method":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ üìç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=location)
        await state.set_state(Order.location)
    elif current_state == None:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö", reply_markup=start)
        await empty_basket(message.from_user.id)


@dp.message_handler(text="üç¥ –ú–µ–Ω—é", state="*")
async def menu(message: types.Message, state: FSMContext):
    markup = await categories(message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)
    await state.set_state(Stages.category)


@dp.message_handler(state=Stages.category)
async def send_welcome(message: types.Message, state: FSMContext):
    data = await get_category_by_name(message.text)
    if data:
        await state.update_data(category=message.text)
        markup = await products(message.text, message.from_user.id)
        await message.answer_photo(photo=f"{URL}{data[0]['category_image']}", reply_markup=markup)
        await state.set_state(Stages.product)
    else:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")


@dp.message_handler(state=Stages.product)
async def send_welcome(message: types.Message, state: FSMContext):
    data = await get_product_by_name(message.text)
    if data:
        await state.update_data(product=message.text)
        markup = await count_button(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö", reply_markup=product)
        await message.answer_photo(photo=f"{URL}{data[0]['product_image']}",
                                   caption=f"{data[0]['product_description']}\n*–¶–µ–Ω–∞:* {data[0]['product_price']} —Å—É–º", reply_markup=markup, parse_mode="Markdown")
        await state.set_state(Stages.count)
    else:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!")


@dp.message_handler(state=Stages.count)
async def send_welcome(message: types.Message, state: FSMContext):
    user_data[message.from_user.id] = 1


async def update_num_text(message: types.Message, new_value: int):
    with suppress(MessageNotModified):
        await message.edit_reply_markup(await count_button(new_value))


@dp.callback_query_handler(Text(startswith="num_"), state=[Stages.count, "*"])
async def callbacks_num(call: types.CallbackQuery, state: FSMContext):
    user_value = user_data.get(call.from_user.id, 1)
    action = call.data.split("_")[1]
    if action == "incr":
        user_data[call.from_user.id] = user_value+1
        await call.answer(f"{user_value+1} —à—Ç.")
        await update_num_text(call.message, user_value+1)

    elif action == "decr":
        user_data[call.from_user.id] = user_value-1
        await call.answer(f"{user_value-1} —à—Ç.")
        await update_num_text(call.message, user_value-1)

    elif action == "finish":
        await call.answer(f"{user_value} —à—Ç.")

    elif action == "add":
        await state.update_data(count=user_value)
        async with state.proxy() as data:
            product = await get_product_by_name(data["product"])
            product_id = product[0]["id"]
            result = await purchase_product(call.from_user.id, product_id, data["count"])
            markup = await products(data["category"], call.from_user.id)
            data = await get_category_by_name(data["category"])
            await call.answer(result)
            await call.message.answer_photo(photo=f"{URL}{data[0]['category_image']}", reply_markup=markup)
            user_data[call.from_user.id] = 1
        await state.set_state(Stages.product)

    await call.answer()


@dp.callback_query_handler(Text(startswith="empty_"), state="*")
async def empty_from_basket(call: types.CallbackQuery, state: FSMContext):
    product_id = count_and_id(call.data)
    await delete_product(call.from_user.id, product_id)
    result = await basket_button(call.from_user.id)
    if result["is_empty"]:
        await call.message.delete()
        await call.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
    else:
        await call.message.edit_text(f"–í –∫–æ—Ä–∑–∏–Ω–µ:\n{result['basket_text']}\n{result['price_text']}", parse_mode="Markdown")
        await call.message.edit_reply_markup(result["button"])
    await state.set_state(Stages.category)


@dp.callback_query_handler(text="empty", state="*")
async def empty(call: types.CallbackQuery, state: FSMContext):
    result = await empty_basket(call.from_user.id)
    await call.answer(result)
    await call.message.delete()
    await state.set_state(Stages.category)


@dp.callback_query_handler(text="nazad", state="*")
async def empty(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    markup = await categories(call.message.from_user.id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)
    await state.set_state(Stages.category)


@dp.callback_query_handler(text="order", state="*")
async def basket(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("""–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 ** *** ** ** 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –æ–Ω–ª–∞–π–Ω —Å 
–ø–æ–º–æ—â—å—é Click, –ª–∏–±–æ Payme, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä 
—Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –≤ 
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–µ—Ä–≤–∏—Å–µ""", reply_markup=phone_number)
    await state.set_state(Order.phone)


@dp.message_handler(content_types="contact", state=Order.phone)
async def menu(message: types.Message, state: FSMContext):
    await put_number(message.from_user.id, message.contact.phone_number)
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ üìç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=location)
    await state.set_state(Order.location)


@dp.message_handler(content_types="location", state=Order.location)
async def menu(message: types.Message, state: FSMContext):
    await put_location(message.from_user.id, message.location)
    await state.update_data(location=message.location)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã", reply_markup=payment_method)
    await state.set_state(Order.payment_method)


@dp.message_handler(state=Order.payment_method)
async def empty(message: types.Message, state: FSMContext):
    text = await basket_button(message.from_user.id)
    await state.update_data(products=text["basket_text"])
    await state.update_data(payment_method=message.text)
    data = await state.get_data()
    await message.answer(text=f"""*–í–∞—à –∑–∞–∫–∞–∑:*
*–ê–¥—Ä–µ—Å:* {data['location']}\n
{data['products']}
*–¢–∏–ø –æ–ø–ª–∞—Ç—ã:* {data['payment_method']}\n
{text['price_text']}""", reply_markup=confirm, parse_mode='Markdown')
    await state.set_state(Order.confirmation)


@dp.message_handler(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", state=Order.confirmation)
async def menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = await basket_button(message.from_user.id)
    await post_order(message.from_user.id, data["products"], data["payment_method"], data["location"], text["price_text"], status="–ó–∞–∫–∞–∑ –Ω–∞—á–∞—Ç")
    result = await all_orders()
    await message.answer(f"""–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {result[-1]['id']}\n–°—Ç–∞—Ç—É—Å: *–ù–æ–≤—ã–π*\n–ê–¥—Ä–µ—Å: {data['location']}\n
{data['products']}\n
–¢–∏–ø –æ–ø–ª–∞—Ç—ã: *{data['payment_method']}*\n
{text['price_text']}\n
*–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.*
–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ –Ω–æ–º–µ—Ä, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç.
–†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ *30* –º–∏–Ω—É—Ç *—Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞.*""", reply_markup=start, parse_mode='Markdown')
    await empty_basket(message.from_user.id)
    for admin in ADMINS:
        await dp.bot.send_message(admin, f"""–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: ‚Ññ {result[-1]['id']}\n–°—Ç–∞—Ç—É—Å: *–ù–æ–≤—ã–π*
–ù–æ–º–µ—Ä: {data['phone']}\n
{data['products']}\n
–¢–∏–ø –æ–ø–ª–∞—Ç—ã: *{data['payment_method']}*\n
{text['price_text']}""", parse_mode='Markdown')
        await dp.bot.send_location(admin, latitude=data['location'].latitude, longitude=data['location'].longitude)


@dp.message_handler(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", state=Order.confirmation)
async def menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö", reply_markup=start)
    await empty_basket(message.from_user.id)


@dp.message_handler(text="üõç –ú–æ–∏ –∑–∞–∫–∞–∑—ã", state="*")
async def menu(message: types.Message, state: FSMContext):
    orders = await get_order_by_user(message.from_user.id)
    if orders:
        for order in orders:
            await dp.bot.send_message(message.chat.id, f"""–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order['id']}\n–°—Ç–∞—Ç—É—Å: *{order['order_status']}*
–ê–¥—Ä–µ—Å: {order['order_address']}\n\n{order['order_items']}\n\n–¢–∏–ø –æ–ø–ª–∞—Ç—ã: *{order['payment_method']}*\n
{order['order_sum']}""", parse_mode='Markdown')
    else:
        await message.answer("–í—ã –≤—Å—ë –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª–∏")


@dp.message_handler(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", state="*")
async def menu(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã", reply_markup=nazad)
    await state.set_state(Comment.comment)


@dp.message_handler(state=Comment.comment)
async def menu(message: types.Message):
    await comment(message.from_user.id, message.from_user.username, message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤", reply_markup=start)
